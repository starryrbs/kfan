// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/starryrbs/kfan/app/house/internal/data/ent/house"
	"github.com/starryrbs/kfan/app/house/internal/data/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHouse = "House"
)

// HouseMutation represents an operation that mutates the House nodes in the graph.
type HouseMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	_Price           *float64
	add_Price        *float64
	title            *string
	community        *string
	toilet_count     *int32
	addtoilet_count  *int32
	kitchen_count    *int32
	addkitchen_count *int32
	floor_count      *int32
	addfloor_count   *int32
	hall_count       *int32
	addhall_count    *int32
	room_count       *int32
	addroom_count    *int32
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*House, error)
	predicates       []predicate.House
}

var _ ent.Mutation = (*HouseMutation)(nil)

// houseOption allows management of the mutation configuration using functional options.
type houseOption func(*HouseMutation)

// newHouseMutation creates new mutation for the House entity.
func newHouseMutation(c config, op Op, opts ...houseOption) *HouseMutation {
	m := &HouseMutation{
		config:        c,
		op:            op,
		typ:           TypeHouse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHouseID sets the ID field of the mutation.
func withHouseID(id int64) houseOption {
	return func(m *HouseMutation) {
		var (
			err   error
			once  sync.Once
			value *House
		)
		m.oldValue = func(ctx context.Context) (*House, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().House.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHouse sets the old House of the mutation.
func withHouse(node *House) houseOption {
	return func(m *HouseMutation) {
		m.oldValue = func(context.Context) (*House, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HouseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HouseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of House entities.
func (m *HouseMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HouseMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPrice sets the "Price" field.
func (m *HouseMutation) SetPrice(f float64) {
	m._Price = &f
	m.add_Price = nil
}

// Price returns the value of the "Price" field in the mutation.
func (m *HouseMutation) Price() (r float64, exists bool) {
	v := m._Price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "Price" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "Price" field.
func (m *HouseMutation) AddPrice(f float64) {
	if m.add_Price != nil {
		*m.add_Price += f
	} else {
		m.add_Price = &f
	}
}

// AddedPrice returns the value that was added to the "Price" field in this mutation.
func (m *HouseMutation) AddedPrice() (r float64, exists bool) {
	v := m.add_Price
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "Price" field.
func (m *HouseMutation) ResetPrice() {
	m._Price = nil
	m.add_Price = nil
}

// SetTitle sets the "title" field.
func (m *HouseMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *HouseMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *HouseMutation) ResetTitle() {
	m.title = nil
}

// SetCommunity sets the "community" field.
func (m *HouseMutation) SetCommunity(s string) {
	m.community = &s
}

// Community returns the value of the "community" field in the mutation.
func (m *HouseMutation) Community() (r string, exists bool) {
	v := m.community
	if v == nil {
		return
	}
	return *v, true
}

// OldCommunity returns the old "community" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldCommunity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCommunity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCommunity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommunity: %w", err)
	}
	return oldValue.Community, nil
}

// ResetCommunity resets all changes to the "community" field.
func (m *HouseMutation) ResetCommunity() {
	m.community = nil
}

// SetToiletCount sets the "toilet_count" field.
func (m *HouseMutation) SetToiletCount(i int32) {
	m.toilet_count = &i
	m.addtoilet_count = nil
}

// ToiletCount returns the value of the "toilet_count" field in the mutation.
func (m *HouseMutation) ToiletCount() (r int32, exists bool) {
	v := m.toilet_count
	if v == nil {
		return
	}
	return *v, true
}

// OldToiletCount returns the old "toilet_count" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldToiletCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToiletCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToiletCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToiletCount: %w", err)
	}
	return oldValue.ToiletCount, nil
}

// AddToiletCount adds i to the "toilet_count" field.
func (m *HouseMutation) AddToiletCount(i int32) {
	if m.addtoilet_count != nil {
		*m.addtoilet_count += i
	} else {
		m.addtoilet_count = &i
	}
}

// AddedToiletCount returns the value that was added to the "toilet_count" field in this mutation.
func (m *HouseMutation) AddedToiletCount() (r int32, exists bool) {
	v := m.addtoilet_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetToiletCount resets all changes to the "toilet_count" field.
func (m *HouseMutation) ResetToiletCount() {
	m.toilet_count = nil
	m.addtoilet_count = nil
}

// SetKitchenCount sets the "kitchen_count" field.
func (m *HouseMutation) SetKitchenCount(i int32) {
	m.kitchen_count = &i
	m.addkitchen_count = nil
}

// KitchenCount returns the value of the "kitchen_count" field in the mutation.
func (m *HouseMutation) KitchenCount() (r int32, exists bool) {
	v := m.kitchen_count
	if v == nil {
		return
	}
	return *v, true
}

// OldKitchenCount returns the old "kitchen_count" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldKitchenCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKitchenCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKitchenCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKitchenCount: %w", err)
	}
	return oldValue.KitchenCount, nil
}

// AddKitchenCount adds i to the "kitchen_count" field.
func (m *HouseMutation) AddKitchenCount(i int32) {
	if m.addkitchen_count != nil {
		*m.addkitchen_count += i
	} else {
		m.addkitchen_count = &i
	}
}

// AddedKitchenCount returns the value that was added to the "kitchen_count" field in this mutation.
func (m *HouseMutation) AddedKitchenCount() (r int32, exists bool) {
	v := m.addkitchen_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetKitchenCount resets all changes to the "kitchen_count" field.
func (m *HouseMutation) ResetKitchenCount() {
	m.kitchen_count = nil
	m.addkitchen_count = nil
}

// SetFloorCount sets the "floor_count" field.
func (m *HouseMutation) SetFloorCount(i int32) {
	m.floor_count = &i
	m.addfloor_count = nil
}

// FloorCount returns the value of the "floor_count" field in the mutation.
func (m *HouseMutation) FloorCount() (r int32, exists bool) {
	v := m.floor_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFloorCount returns the old "floor_count" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldFloorCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFloorCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFloorCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloorCount: %w", err)
	}
	return oldValue.FloorCount, nil
}

// AddFloorCount adds i to the "floor_count" field.
func (m *HouseMutation) AddFloorCount(i int32) {
	if m.addfloor_count != nil {
		*m.addfloor_count += i
	} else {
		m.addfloor_count = &i
	}
}

// AddedFloorCount returns the value that was added to the "floor_count" field in this mutation.
func (m *HouseMutation) AddedFloorCount() (r int32, exists bool) {
	v := m.addfloor_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetFloorCount resets all changes to the "floor_count" field.
func (m *HouseMutation) ResetFloorCount() {
	m.floor_count = nil
	m.addfloor_count = nil
}

// SetHallCount sets the "hall_count" field.
func (m *HouseMutation) SetHallCount(i int32) {
	m.hall_count = &i
	m.addhall_count = nil
}

// HallCount returns the value of the "hall_count" field in the mutation.
func (m *HouseMutation) HallCount() (r int32, exists bool) {
	v := m.hall_count
	if v == nil {
		return
	}
	return *v, true
}

// OldHallCount returns the old "hall_count" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldHallCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHallCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHallCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHallCount: %w", err)
	}
	return oldValue.HallCount, nil
}

// AddHallCount adds i to the "hall_count" field.
func (m *HouseMutation) AddHallCount(i int32) {
	if m.addhall_count != nil {
		*m.addhall_count += i
	} else {
		m.addhall_count = &i
	}
}

// AddedHallCount returns the value that was added to the "hall_count" field in this mutation.
func (m *HouseMutation) AddedHallCount() (r int32, exists bool) {
	v := m.addhall_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetHallCount resets all changes to the "hall_count" field.
func (m *HouseMutation) ResetHallCount() {
	m.hall_count = nil
	m.addhall_count = nil
}

// SetRoomCount sets the "room_count" field.
func (m *HouseMutation) SetRoomCount(i int32) {
	m.room_count = &i
	m.addroom_count = nil
}

// RoomCount returns the value of the "room_count" field in the mutation.
func (m *HouseMutation) RoomCount() (r int32, exists bool) {
	v := m.room_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomCount returns the old "room_count" field's value of the House entity.
// If the House object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HouseMutation) OldRoomCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomCount: %w", err)
	}
	return oldValue.RoomCount, nil
}

// AddRoomCount adds i to the "room_count" field.
func (m *HouseMutation) AddRoomCount(i int32) {
	if m.addroom_count != nil {
		*m.addroom_count += i
	} else {
		m.addroom_count = &i
	}
}

// AddedRoomCount returns the value that was added to the "room_count" field in this mutation.
func (m *HouseMutation) AddedRoomCount() (r int32, exists bool) {
	v := m.addroom_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoomCount resets all changes to the "room_count" field.
func (m *HouseMutation) ResetRoomCount() {
	m.room_count = nil
	m.addroom_count = nil
}

// Where appends a list predicates to the HouseMutation builder.
func (m *HouseMutation) Where(ps ...predicate.House) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HouseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (House).
func (m *HouseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HouseMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m._Price != nil {
		fields = append(fields, house.FieldPrice)
	}
	if m.title != nil {
		fields = append(fields, house.FieldTitle)
	}
	if m.community != nil {
		fields = append(fields, house.FieldCommunity)
	}
	if m.toilet_count != nil {
		fields = append(fields, house.FieldToiletCount)
	}
	if m.kitchen_count != nil {
		fields = append(fields, house.FieldKitchenCount)
	}
	if m.floor_count != nil {
		fields = append(fields, house.FieldFloorCount)
	}
	if m.hall_count != nil {
		fields = append(fields, house.FieldHallCount)
	}
	if m.room_count != nil {
		fields = append(fields, house.FieldRoomCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HouseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case house.FieldPrice:
		return m.Price()
	case house.FieldTitle:
		return m.Title()
	case house.FieldCommunity:
		return m.Community()
	case house.FieldToiletCount:
		return m.ToiletCount()
	case house.FieldKitchenCount:
		return m.KitchenCount()
	case house.FieldFloorCount:
		return m.FloorCount()
	case house.FieldHallCount:
		return m.HallCount()
	case house.FieldRoomCount:
		return m.RoomCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HouseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case house.FieldPrice:
		return m.OldPrice(ctx)
	case house.FieldTitle:
		return m.OldTitle(ctx)
	case house.FieldCommunity:
		return m.OldCommunity(ctx)
	case house.FieldToiletCount:
		return m.OldToiletCount(ctx)
	case house.FieldKitchenCount:
		return m.OldKitchenCount(ctx)
	case house.FieldFloorCount:
		return m.OldFloorCount(ctx)
	case house.FieldHallCount:
		return m.OldHallCount(ctx)
	case house.FieldRoomCount:
		return m.OldRoomCount(ctx)
	}
	return nil, fmt.Errorf("unknown House field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HouseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case house.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case house.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case house.FieldCommunity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommunity(v)
		return nil
	case house.FieldToiletCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToiletCount(v)
		return nil
	case house.FieldKitchenCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKitchenCount(v)
		return nil
	case house.FieldFloorCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloorCount(v)
		return nil
	case house.FieldHallCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHallCount(v)
		return nil
	case house.FieldRoomCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomCount(v)
		return nil
	}
	return fmt.Errorf("unknown House field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HouseMutation) AddedFields() []string {
	var fields []string
	if m.add_Price != nil {
		fields = append(fields, house.FieldPrice)
	}
	if m.addtoilet_count != nil {
		fields = append(fields, house.FieldToiletCount)
	}
	if m.addkitchen_count != nil {
		fields = append(fields, house.FieldKitchenCount)
	}
	if m.addfloor_count != nil {
		fields = append(fields, house.FieldFloorCount)
	}
	if m.addhall_count != nil {
		fields = append(fields, house.FieldHallCount)
	}
	if m.addroom_count != nil {
		fields = append(fields, house.FieldRoomCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HouseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case house.FieldPrice:
		return m.AddedPrice()
	case house.FieldToiletCount:
		return m.AddedToiletCount()
	case house.FieldKitchenCount:
		return m.AddedKitchenCount()
	case house.FieldFloorCount:
		return m.AddedFloorCount()
	case house.FieldHallCount:
		return m.AddedHallCount()
	case house.FieldRoomCount:
		return m.AddedRoomCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HouseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case house.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case house.FieldToiletCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToiletCount(v)
		return nil
	case house.FieldKitchenCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKitchenCount(v)
		return nil
	case house.FieldFloorCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFloorCount(v)
		return nil
	case house.FieldHallCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHallCount(v)
		return nil
	case house.FieldRoomCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoomCount(v)
		return nil
	}
	return fmt.Errorf("unknown House numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HouseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HouseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HouseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown House nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HouseMutation) ResetField(name string) error {
	switch name {
	case house.FieldPrice:
		m.ResetPrice()
		return nil
	case house.FieldTitle:
		m.ResetTitle()
		return nil
	case house.FieldCommunity:
		m.ResetCommunity()
		return nil
	case house.FieldToiletCount:
		m.ResetToiletCount()
		return nil
	case house.FieldKitchenCount:
		m.ResetKitchenCount()
		return nil
	case house.FieldFloorCount:
		m.ResetFloorCount()
		return nil
	case house.FieldHallCount:
		m.ResetHallCount()
		return nil
	case house.FieldRoomCount:
		m.ResetRoomCount()
		return nil
	}
	return fmt.Errorf("unknown House field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HouseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HouseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HouseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HouseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HouseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HouseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HouseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown House unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HouseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown House edge %s", name)
}
