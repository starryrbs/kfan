// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/starryrbs/kfan/app/house/internal/data/ent/house"
)

// House is the model entity for the House schema.
type House struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Price holds the value of the "Price" field.
	Price float64 `json:"Price,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Community holds the value of the "community" field.
	Community string `json:"community,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// ToiletCount holds the value of the "toilet_count" field.
	ToiletCount int32 `json:"toilet_count,omitempty"`
	// KitchenCount holds the value of the "kitchen_count" field.
	KitchenCount int32 `json:"kitchen_count,omitempty"`
	// FloorCount holds the value of the "floor_count" field.
	FloorCount int32 `json:"floor_count,omitempty"`
	// HallCount holds the value of the "hall_count" field.
	HallCount int32 `json:"hall_count,omitempty"`
	// RoomCount holds the value of the "room_count" field.
	RoomCount int32 `json:"room_count,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*House) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case house.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case house.FieldID, house.FieldToiletCount, house.FieldKitchenCount, house.FieldFloorCount, house.FieldHallCount, house.FieldRoomCount:
			values[i] = new(sql.NullInt64)
		case house.FieldTitle, house.FieldCommunity, house.FieldImage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type House", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the House fields.
func (h *House) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case house.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int64(value.Int64)
		case house.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[i])
			} else if value.Valid {
				h.Price = value.Float64
			}
		case house.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				h.Title = value.String
			}
		case house.FieldCommunity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field community", values[i])
			} else if value.Valid {
				h.Community = value.String
			}
		case house.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				h.Image = value.String
			}
		case house.FieldToiletCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field toilet_count", values[i])
			} else if value.Valid {
				h.ToiletCount = int32(value.Int64)
			}
		case house.FieldKitchenCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kitchen_count", values[i])
			} else if value.Valid {
				h.KitchenCount = int32(value.Int64)
			}
		case house.FieldFloorCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field floor_count", values[i])
			} else if value.Valid {
				h.FloorCount = int32(value.Int64)
			}
		case house.FieldHallCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hall_count", values[i])
			} else if value.Valid {
				h.HallCount = int32(value.Int64)
			}
		case house.FieldRoomCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field room_count", values[i])
			} else if value.Valid {
				h.RoomCount = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this House.
// Note that you need to call House.Unwrap() before calling this method if this House
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *House) Update() *HouseUpdateOne {
	return (&HouseClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the House entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *House) Unwrap() *House {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: House is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *House) String() string {
	var builder strings.Builder
	builder.WriteString("House(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", Price=")
	builder.WriteString(fmt.Sprintf("%v", h.Price))
	builder.WriteString(", title=")
	builder.WriteString(h.Title)
	builder.WriteString(", community=")
	builder.WriteString(h.Community)
	builder.WriteString(", image=")
	builder.WriteString(h.Image)
	builder.WriteString(", toilet_count=")
	builder.WriteString(fmt.Sprintf("%v", h.ToiletCount))
	builder.WriteString(", kitchen_count=")
	builder.WriteString(fmt.Sprintf("%v", h.KitchenCount))
	builder.WriteString(", floor_count=")
	builder.WriteString(fmt.Sprintf("%v", h.FloorCount))
	builder.WriteString(", hall_count=")
	builder.WriteString(fmt.Sprintf("%v", h.HallCount))
	builder.WriteString(", room_count=")
	builder.WriteString(fmt.Sprintf("%v", h.RoomCount))
	builder.WriteByte(')')
	return builder.String()
}

// Houses is a parsable slice of House.
type Houses []*House

func (h Houses) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
