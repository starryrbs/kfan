// Code generated by entc, DO NOT EDIT.

package house

import (
	"entgo.io/ent/dialect/sql"
	"github.com/starryrbs/kfan/app/house/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Price applies equality check predicate on the "Price" field. It's identical to PriceEQ.
func Price(v float64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Community applies equality check predicate on the "community" field. It's identical to CommunityEQ.
func Community(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommunity), v))
	})
}

// ToiletCount applies equality check predicate on the "toilet_count" field. It's identical to ToiletCountEQ.
func ToiletCount(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToiletCount), v))
	})
}

// KitchenCount applies equality check predicate on the "kitchen_count" field. It's identical to KitchenCountEQ.
func KitchenCount(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKitchenCount), v))
	})
}

// FloorCount applies equality check predicate on the "floor_count" field. It's identical to FloorCountEQ.
func FloorCount(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloorCount), v))
	})
}

// HallCount applies equality check predicate on the "hall_count" field. It's identical to HallCountEQ.
func HallCount(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHallCount), v))
	})
}

// RoomCount applies equality check predicate on the "room_count" field. It's identical to RoomCountEQ.
func RoomCount(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomCount), v))
	})
}

// PriceEQ applies the EQ predicate on the "Price" field.
func PriceEQ(v float64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "Price" field.
func PriceNEQ(v float64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "Price" field.
func PriceIn(vs ...float64) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "Price" field.
func PriceNotIn(vs ...float64) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "Price" field.
func PriceGT(v float64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "Price" field.
func PriceGTE(v float64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "Price" field.
func PriceLT(v float64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "Price" field.
func PriceLTE(v float64) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// CommunityEQ applies the EQ predicate on the "community" field.
func CommunityEQ(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommunity), v))
	})
}

// CommunityNEQ applies the NEQ predicate on the "community" field.
func CommunityNEQ(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommunity), v))
	})
}

// CommunityIn applies the In predicate on the "community" field.
func CommunityIn(vs ...string) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommunity), v...))
	})
}

// CommunityNotIn applies the NotIn predicate on the "community" field.
func CommunityNotIn(vs ...string) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommunity), v...))
	})
}

// CommunityGT applies the GT predicate on the "community" field.
func CommunityGT(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommunity), v))
	})
}

// CommunityGTE applies the GTE predicate on the "community" field.
func CommunityGTE(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommunity), v))
	})
}

// CommunityLT applies the LT predicate on the "community" field.
func CommunityLT(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommunity), v))
	})
}

// CommunityLTE applies the LTE predicate on the "community" field.
func CommunityLTE(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommunity), v))
	})
}

// CommunityContains applies the Contains predicate on the "community" field.
func CommunityContains(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCommunity), v))
	})
}

// CommunityHasPrefix applies the HasPrefix predicate on the "community" field.
func CommunityHasPrefix(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCommunity), v))
	})
}

// CommunityHasSuffix applies the HasSuffix predicate on the "community" field.
func CommunityHasSuffix(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCommunity), v))
	})
}

// CommunityEqualFold applies the EqualFold predicate on the "community" field.
func CommunityEqualFold(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCommunity), v))
	})
}

// CommunityContainsFold applies the ContainsFold predicate on the "community" field.
func CommunityContainsFold(v string) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCommunity), v))
	})
}

// ToiletCountEQ applies the EQ predicate on the "toilet_count" field.
func ToiletCountEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToiletCount), v))
	})
}

// ToiletCountNEQ applies the NEQ predicate on the "toilet_count" field.
func ToiletCountNEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToiletCount), v))
	})
}

// ToiletCountIn applies the In predicate on the "toilet_count" field.
func ToiletCountIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToiletCount), v...))
	})
}

// ToiletCountNotIn applies the NotIn predicate on the "toilet_count" field.
func ToiletCountNotIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToiletCount), v...))
	})
}

// ToiletCountGT applies the GT predicate on the "toilet_count" field.
func ToiletCountGT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToiletCount), v))
	})
}

// ToiletCountGTE applies the GTE predicate on the "toilet_count" field.
func ToiletCountGTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToiletCount), v))
	})
}

// ToiletCountLT applies the LT predicate on the "toilet_count" field.
func ToiletCountLT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToiletCount), v))
	})
}

// ToiletCountLTE applies the LTE predicate on the "toilet_count" field.
func ToiletCountLTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToiletCount), v))
	})
}

// KitchenCountEQ applies the EQ predicate on the "kitchen_count" field.
func KitchenCountEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKitchenCount), v))
	})
}

// KitchenCountNEQ applies the NEQ predicate on the "kitchen_count" field.
func KitchenCountNEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKitchenCount), v))
	})
}

// KitchenCountIn applies the In predicate on the "kitchen_count" field.
func KitchenCountIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKitchenCount), v...))
	})
}

// KitchenCountNotIn applies the NotIn predicate on the "kitchen_count" field.
func KitchenCountNotIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKitchenCount), v...))
	})
}

// KitchenCountGT applies the GT predicate on the "kitchen_count" field.
func KitchenCountGT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKitchenCount), v))
	})
}

// KitchenCountGTE applies the GTE predicate on the "kitchen_count" field.
func KitchenCountGTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKitchenCount), v))
	})
}

// KitchenCountLT applies the LT predicate on the "kitchen_count" field.
func KitchenCountLT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKitchenCount), v))
	})
}

// KitchenCountLTE applies the LTE predicate on the "kitchen_count" field.
func KitchenCountLTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKitchenCount), v))
	})
}

// FloorCountEQ applies the EQ predicate on the "floor_count" field.
func FloorCountEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloorCount), v))
	})
}

// FloorCountNEQ applies the NEQ predicate on the "floor_count" field.
func FloorCountNEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFloorCount), v))
	})
}

// FloorCountIn applies the In predicate on the "floor_count" field.
func FloorCountIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFloorCount), v...))
	})
}

// FloorCountNotIn applies the NotIn predicate on the "floor_count" field.
func FloorCountNotIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFloorCount), v...))
	})
}

// FloorCountGT applies the GT predicate on the "floor_count" field.
func FloorCountGT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFloorCount), v))
	})
}

// FloorCountGTE applies the GTE predicate on the "floor_count" field.
func FloorCountGTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFloorCount), v))
	})
}

// FloorCountLT applies the LT predicate on the "floor_count" field.
func FloorCountLT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFloorCount), v))
	})
}

// FloorCountLTE applies the LTE predicate on the "floor_count" field.
func FloorCountLTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFloorCount), v))
	})
}

// HallCountEQ applies the EQ predicate on the "hall_count" field.
func HallCountEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHallCount), v))
	})
}

// HallCountNEQ applies the NEQ predicate on the "hall_count" field.
func HallCountNEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHallCount), v))
	})
}

// HallCountIn applies the In predicate on the "hall_count" field.
func HallCountIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHallCount), v...))
	})
}

// HallCountNotIn applies the NotIn predicate on the "hall_count" field.
func HallCountNotIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHallCount), v...))
	})
}

// HallCountGT applies the GT predicate on the "hall_count" field.
func HallCountGT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHallCount), v))
	})
}

// HallCountGTE applies the GTE predicate on the "hall_count" field.
func HallCountGTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHallCount), v))
	})
}

// HallCountLT applies the LT predicate on the "hall_count" field.
func HallCountLT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHallCount), v))
	})
}

// HallCountLTE applies the LTE predicate on the "hall_count" field.
func HallCountLTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHallCount), v))
	})
}

// RoomCountEQ applies the EQ predicate on the "room_count" field.
func RoomCountEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomCount), v))
	})
}

// RoomCountNEQ applies the NEQ predicate on the "room_count" field.
func RoomCountNEQ(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomCount), v))
	})
}

// RoomCountIn applies the In predicate on the "room_count" field.
func RoomCountIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomCount), v...))
	})
}

// RoomCountNotIn applies the NotIn predicate on the "room_count" field.
func RoomCountNotIn(vs ...int32) predicate.House {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.House(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomCount), v...))
	})
}

// RoomCountGT applies the GT predicate on the "room_count" field.
func RoomCountGT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomCount), v))
	})
}

// RoomCountGTE applies the GTE predicate on the "room_count" field.
func RoomCountGTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomCount), v))
	})
}

// RoomCountLT applies the LT predicate on the "room_count" field.
func RoomCountLT(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomCount), v))
	})
}

// RoomCountLTE applies the LTE predicate on the "room_count" field.
func RoomCountLTE(v int32) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomCount), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.House) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.House) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.House) predicate.House {
	return predicate.House(func(s *sql.Selector) {
		p(s.Not())
	})
}
