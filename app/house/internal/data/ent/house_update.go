// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/starryrbs/kfan/app/house/internal/data/ent/house"
	"github.com/starryrbs/kfan/app/house/internal/data/ent/predicate"
)

// HouseUpdate is the builder for updating House entities.
type HouseUpdate struct {
	config
	hooks    []Hook
	mutation *HouseMutation
}

// Where appends a list predicates to the HouseUpdate builder.
func (hu *HouseUpdate) Where(ps ...predicate.House) *HouseUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetPrice sets the "Price" field.
func (hu *HouseUpdate) SetPrice(f float64) *HouseUpdate {
	hu.mutation.ResetPrice()
	hu.mutation.SetPrice(f)
	return hu
}

// AddPrice adds f to the "Price" field.
func (hu *HouseUpdate) AddPrice(f float64) *HouseUpdate {
	hu.mutation.AddPrice(f)
	return hu
}

// SetTitle sets the "title" field.
func (hu *HouseUpdate) SetTitle(s string) *HouseUpdate {
	hu.mutation.SetTitle(s)
	return hu
}

// SetCommunity sets the "community" field.
func (hu *HouseUpdate) SetCommunity(s string) *HouseUpdate {
	hu.mutation.SetCommunity(s)
	return hu
}

// SetImage sets the "image" field.
func (hu *HouseUpdate) SetImage(s string) *HouseUpdate {
	hu.mutation.SetImage(s)
	return hu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (hu *HouseUpdate) SetNillableImage(s *string) *HouseUpdate {
	if s != nil {
		hu.SetImage(*s)
	}
	return hu
}

// SetToiletCount sets the "toilet_count" field.
func (hu *HouseUpdate) SetToiletCount(i int32) *HouseUpdate {
	hu.mutation.ResetToiletCount()
	hu.mutation.SetToiletCount(i)
	return hu
}

// SetNillableToiletCount sets the "toilet_count" field if the given value is not nil.
func (hu *HouseUpdate) SetNillableToiletCount(i *int32) *HouseUpdate {
	if i != nil {
		hu.SetToiletCount(*i)
	}
	return hu
}

// AddToiletCount adds i to the "toilet_count" field.
func (hu *HouseUpdate) AddToiletCount(i int32) *HouseUpdate {
	hu.mutation.AddToiletCount(i)
	return hu
}

// SetKitchenCount sets the "kitchen_count" field.
func (hu *HouseUpdate) SetKitchenCount(i int32) *HouseUpdate {
	hu.mutation.ResetKitchenCount()
	hu.mutation.SetKitchenCount(i)
	return hu
}

// SetNillableKitchenCount sets the "kitchen_count" field if the given value is not nil.
func (hu *HouseUpdate) SetNillableKitchenCount(i *int32) *HouseUpdate {
	if i != nil {
		hu.SetKitchenCount(*i)
	}
	return hu
}

// AddKitchenCount adds i to the "kitchen_count" field.
func (hu *HouseUpdate) AddKitchenCount(i int32) *HouseUpdate {
	hu.mutation.AddKitchenCount(i)
	return hu
}

// SetFloorCount sets the "floor_count" field.
func (hu *HouseUpdate) SetFloorCount(i int32) *HouseUpdate {
	hu.mutation.ResetFloorCount()
	hu.mutation.SetFloorCount(i)
	return hu
}

// SetNillableFloorCount sets the "floor_count" field if the given value is not nil.
func (hu *HouseUpdate) SetNillableFloorCount(i *int32) *HouseUpdate {
	if i != nil {
		hu.SetFloorCount(*i)
	}
	return hu
}

// AddFloorCount adds i to the "floor_count" field.
func (hu *HouseUpdate) AddFloorCount(i int32) *HouseUpdate {
	hu.mutation.AddFloorCount(i)
	return hu
}

// SetHallCount sets the "hall_count" field.
func (hu *HouseUpdate) SetHallCount(i int32) *HouseUpdate {
	hu.mutation.ResetHallCount()
	hu.mutation.SetHallCount(i)
	return hu
}

// SetNillableHallCount sets the "hall_count" field if the given value is not nil.
func (hu *HouseUpdate) SetNillableHallCount(i *int32) *HouseUpdate {
	if i != nil {
		hu.SetHallCount(*i)
	}
	return hu
}

// AddHallCount adds i to the "hall_count" field.
func (hu *HouseUpdate) AddHallCount(i int32) *HouseUpdate {
	hu.mutation.AddHallCount(i)
	return hu
}

// SetRoomCount sets the "room_count" field.
func (hu *HouseUpdate) SetRoomCount(i int32) *HouseUpdate {
	hu.mutation.ResetRoomCount()
	hu.mutation.SetRoomCount(i)
	return hu
}

// SetNillableRoomCount sets the "room_count" field if the given value is not nil.
func (hu *HouseUpdate) SetNillableRoomCount(i *int32) *HouseUpdate {
	if i != nil {
		hu.SetRoomCount(*i)
	}
	return hu
}

// AddRoomCount adds i to the "room_count" field.
func (hu *HouseUpdate) AddRoomCount(i int32) *HouseUpdate {
	hu.mutation.AddRoomCount(i)
	return hu
}

// Mutation returns the HouseMutation object of the builder.
func (hu *HouseUpdate) Mutation() *HouseMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HouseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		if err = hu.check(); err != nil {
			return 0, err
		}
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HouseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hu.check(); err != nil {
				return 0, err
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HouseUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HouseUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HouseUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HouseUpdate) check() error {
	if v, ok := hu.mutation.Title(); ok {
		if err := house.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	return nil
}

func (hu *HouseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   house.Table,
			Columns: house.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: house.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: house.FieldPrice,
		})
	}
	if value, ok := hu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: house.FieldPrice,
		})
	}
	if value, ok := hu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: house.FieldTitle,
		})
	}
	if value, ok := hu.mutation.Community(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: house.FieldCommunity,
		})
	}
	if value, ok := hu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: house.FieldImage,
		})
	}
	if value, ok := hu.mutation.ToiletCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldToiletCount,
		})
	}
	if value, ok := hu.mutation.AddedToiletCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldToiletCount,
		})
	}
	if value, ok := hu.mutation.KitchenCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldKitchenCount,
		})
	}
	if value, ok := hu.mutation.AddedKitchenCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldKitchenCount,
		})
	}
	if value, ok := hu.mutation.FloorCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldFloorCount,
		})
	}
	if value, ok := hu.mutation.AddedFloorCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldFloorCount,
		})
	}
	if value, ok := hu.mutation.HallCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldHallCount,
		})
	}
	if value, ok := hu.mutation.AddedHallCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldHallCount,
		})
	}
	if value, ok := hu.mutation.RoomCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldRoomCount,
		})
	}
	if value, ok := hu.mutation.AddedRoomCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldRoomCount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{house.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HouseUpdateOne is the builder for updating a single House entity.
type HouseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HouseMutation
}

// SetPrice sets the "Price" field.
func (huo *HouseUpdateOne) SetPrice(f float64) *HouseUpdateOne {
	huo.mutation.ResetPrice()
	huo.mutation.SetPrice(f)
	return huo
}

// AddPrice adds f to the "Price" field.
func (huo *HouseUpdateOne) AddPrice(f float64) *HouseUpdateOne {
	huo.mutation.AddPrice(f)
	return huo
}

// SetTitle sets the "title" field.
func (huo *HouseUpdateOne) SetTitle(s string) *HouseUpdateOne {
	huo.mutation.SetTitle(s)
	return huo
}

// SetCommunity sets the "community" field.
func (huo *HouseUpdateOne) SetCommunity(s string) *HouseUpdateOne {
	huo.mutation.SetCommunity(s)
	return huo
}

// SetImage sets the "image" field.
func (huo *HouseUpdateOne) SetImage(s string) *HouseUpdateOne {
	huo.mutation.SetImage(s)
	return huo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (huo *HouseUpdateOne) SetNillableImage(s *string) *HouseUpdateOne {
	if s != nil {
		huo.SetImage(*s)
	}
	return huo
}

// SetToiletCount sets the "toilet_count" field.
func (huo *HouseUpdateOne) SetToiletCount(i int32) *HouseUpdateOne {
	huo.mutation.ResetToiletCount()
	huo.mutation.SetToiletCount(i)
	return huo
}

// SetNillableToiletCount sets the "toilet_count" field if the given value is not nil.
func (huo *HouseUpdateOne) SetNillableToiletCount(i *int32) *HouseUpdateOne {
	if i != nil {
		huo.SetToiletCount(*i)
	}
	return huo
}

// AddToiletCount adds i to the "toilet_count" field.
func (huo *HouseUpdateOne) AddToiletCount(i int32) *HouseUpdateOne {
	huo.mutation.AddToiletCount(i)
	return huo
}

// SetKitchenCount sets the "kitchen_count" field.
func (huo *HouseUpdateOne) SetKitchenCount(i int32) *HouseUpdateOne {
	huo.mutation.ResetKitchenCount()
	huo.mutation.SetKitchenCount(i)
	return huo
}

// SetNillableKitchenCount sets the "kitchen_count" field if the given value is not nil.
func (huo *HouseUpdateOne) SetNillableKitchenCount(i *int32) *HouseUpdateOne {
	if i != nil {
		huo.SetKitchenCount(*i)
	}
	return huo
}

// AddKitchenCount adds i to the "kitchen_count" field.
func (huo *HouseUpdateOne) AddKitchenCount(i int32) *HouseUpdateOne {
	huo.mutation.AddKitchenCount(i)
	return huo
}

// SetFloorCount sets the "floor_count" field.
func (huo *HouseUpdateOne) SetFloorCount(i int32) *HouseUpdateOne {
	huo.mutation.ResetFloorCount()
	huo.mutation.SetFloorCount(i)
	return huo
}

// SetNillableFloorCount sets the "floor_count" field if the given value is not nil.
func (huo *HouseUpdateOne) SetNillableFloorCount(i *int32) *HouseUpdateOne {
	if i != nil {
		huo.SetFloorCount(*i)
	}
	return huo
}

// AddFloorCount adds i to the "floor_count" field.
func (huo *HouseUpdateOne) AddFloorCount(i int32) *HouseUpdateOne {
	huo.mutation.AddFloorCount(i)
	return huo
}

// SetHallCount sets the "hall_count" field.
func (huo *HouseUpdateOne) SetHallCount(i int32) *HouseUpdateOne {
	huo.mutation.ResetHallCount()
	huo.mutation.SetHallCount(i)
	return huo
}

// SetNillableHallCount sets the "hall_count" field if the given value is not nil.
func (huo *HouseUpdateOne) SetNillableHallCount(i *int32) *HouseUpdateOne {
	if i != nil {
		huo.SetHallCount(*i)
	}
	return huo
}

// AddHallCount adds i to the "hall_count" field.
func (huo *HouseUpdateOne) AddHallCount(i int32) *HouseUpdateOne {
	huo.mutation.AddHallCount(i)
	return huo
}

// SetRoomCount sets the "room_count" field.
func (huo *HouseUpdateOne) SetRoomCount(i int32) *HouseUpdateOne {
	huo.mutation.ResetRoomCount()
	huo.mutation.SetRoomCount(i)
	return huo
}

// SetNillableRoomCount sets the "room_count" field if the given value is not nil.
func (huo *HouseUpdateOne) SetNillableRoomCount(i *int32) *HouseUpdateOne {
	if i != nil {
		huo.SetRoomCount(*i)
	}
	return huo
}

// AddRoomCount adds i to the "room_count" field.
func (huo *HouseUpdateOne) AddRoomCount(i int32) *HouseUpdateOne {
	huo.mutation.AddRoomCount(i)
	return huo
}

// Mutation returns the HouseMutation object of the builder.
func (huo *HouseUpdateOne) Mutation() *HouseMutation {
	return huo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HouseUpdateOne) Select(field string, fields ...string) *HouseUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated House entity.
func (huo *HouseUpdateOne) Save(ctx context.Context) (*House, error) {
	var (
		err  error
		node *House
	)
	if len(huo.hooks) == 0 {
		if err = huo.check(); err != nil {
			return nil, err
		}
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HouseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = huo.check(); err != nil {
				return nil, err
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HouseUpdateOne) SaveX(ctx context.Context) *House {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HouseUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HouseUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HouseUpdateOne) check() error {
	if v, ok := huo.mutation.Title(); ok {
		if err := house.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	return nil
}

func (huo *HouseUpdateOne) sqlSave(ctx context.Context) (_node *House, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   house.Table,
			Columns: house.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: house.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing House.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, house.FieldID)
		for _, f := range fields {
			if !house.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != house.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: house.FieldPrice,
		})
	}
	if value, ok := huo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: house.FieldPrice,
		})
	}
	if value, ok := huo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: house.FieldTitle,
		})
	}
	if value, ok := huo.mutation.Community(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: house.FieldCommunity,
		})
	}
	if value, ok := huo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: house.FieldImage,
		})
	}
	if value, ok := huo.mutation.ToiletCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldToiletCount,
		})
	}
	if value, ok := huo.mutation.AddedToiletCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldToiletCount,
		})
	}
	if value, ok := huo.mutation.KitchenCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldKitchenCount,
		})
	}
	if value, ok := huo.mutation.AddedKitchenCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldKitchenCount,
		})
	}
	if value, ok := huo.mutation.FloorCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldFloorCount,
		})
	}
	if value, ok := huo.mutation.AddedFloorCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldFloorCount,
		})
	}
	if value, ok := huo.mutation.HallCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldHallCount,
		})
	}
	if value, ok := huo.mutation.AddedHallCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldHallCount,
		})
	}
	if value, ok := huo.mutation.RoomCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldRoomCount,
		})
	}
	if value, ok := huo.mutation.AddedRoomCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: house.FieldRoomCount,
		})
	}
	_node = &House{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{house.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
