// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/house/service/v1/house.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateHouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHouseRequestMultiError, or nil if none found.
func (m *CreateHouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 20 {
		err := CreateHouseRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCommunity()); l < 1 || l > 20 {
		err := CreateHouseRequestValidationError{
			field:  "Community",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FloorCount

	// no validation rules for KitchenCount

	// no validation rules for ToiletCount

	// no validation rules for HallCount

	// no validation rules for RoomCount

	if uri, err := url.Parse(m.GetImage()); err != nil {
		err = CreateHouseRequestValidationError{
			field:  "Image",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateHouseRequestValidationError{
			field:  "Image",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateHouseRequestMultiError(errors)
	}

	return nil
}

// CreateHouseRequestMultiError is an error wrapping multiple validation errors
// returned by CreateHouseRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateHouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHouseRequestMultiError) AllErrors() []error { return m }

// CreateHouseRequestValidationError is the validation error returned by
// CreateHouseRequest.Validate if the designated constraints aren't met.
type CreateHouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHouseRequestValidationError) ErrorName() string {
	return "CreateHouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHouseRequestValidationError{}

// Validate checks the field values on CreateHouseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateHouseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHouseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHouseReplyMultiError, or nil if none found.
func (m *CreateHouseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHouseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateHouseReplyMultiError(errors)
	}

	return nil
}

// CreateHouseReplyMultiError is an error wrapping multiple validation errors
// returned by CreateHouseReply.ValidateAll() if the designated constraints
// aren't met.
type CreateHouseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHouseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHouseReplyMultiError) AllErrors() []error { return m }

// CreateHouseReplyValidationError is the validation error returned by
// CreateHouseReply.Validate if the designated constraints aren't met.
type CreateHouseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHouseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHouseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHouseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHouseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHouseReplyValidationError) ErrorName() string { return "CreateHouseReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateHouseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHouseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHouseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHouseReplyValidationError{}

// Validate checks the field values on GetHouseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHouseRequestMultiError, or nil if none found.
func (m *GetHouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetHouseRequestMultiError(errors)
	}

	return nil
}

// GetHouseRequestMultiError is an error wrapping multiple validation errors
// returned by GetHouseRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHouseRequestMultiError) AllErrors() []error { return m }

// GetHouseRequestValidationError is the validation error returned by
// GetHouseRequest.Validate if the designated constraints aren't met.
type GetHouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHouseRequestValidationError) ErrorName() string { return "GetHouseRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHouseRequestValidationError{}

// Validate checks the field values on GetHouseReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHouseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHouseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHouseReplyMultiError, or
// nil if none found.
func (m *GetHouseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHouseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Community

	// no validation rules for FloorCount

	// no validation rules for KitchenCount

	// no validation rules for ToiletCount

	// no validation rules for HallCount

	// no validation rules for RoomCount

	if len(errors) > 0 {
		return GetHouseReplyMultiError(errors)
	}

	return nil
}

// GetHouseReplyMultiError is an error wrapping multiple validation errors
// returned by GetHouseReply.ValidateAll() if the designated constraints
// aren't met.
type GetHouseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHouseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHouseReplyMultiError) AllErrors() []error { return m }

// GetHouseReplyValidationError is the validation error returned by
// GetHouseReply.Validate if the designated constraints aren't met.
type GetHouseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHouseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHouseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHouseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHouseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHouseReplyValidationError) ErrorName() string { return "GetHouseReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetHouseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHouseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHouseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHouseReplyValidationError{}

// Validate checks the field values on ListHouseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHouseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHouseRequestMultiError, or nil if none found.
func (m *ListHouseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHouseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListHouseRequestMultiError(errors)
	}

	return nil
}

// ListHouseRequestMultiError is an error wrapping multiple validation errors
// returned by ListHouseRequest.ValidateAll() if the designated constraints
// aren't met.
type ListHouseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHouseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHouseRequestMultiError) AllErrors() []error { return m }

// ListHouseRequestValidationError is the validation error returned by
// ListHouseRequest.Validate if the designated constraints aren't met.
type ListHouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHouseRequestValidationError) ErrorName() string { return "ListHouseRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListHouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHouseRequestValidationError{}

// Validate checks the field values on ListHouseReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListHouseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHouseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListHouseReplyMultiError,
// or nil if none found.
func (m *ListHouseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHouseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHouseReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHouseReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHouseReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListHouseReplyMultiError(errors)
	}

	return nil
}

// ListHouseReplyMultiError is an error wrapping multiple validation errors
// returned by ListHouseReply.ValidateAll() if the designated constraints
// aren't met.
type ListHouseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHouseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHouseReplyMultiError) AllErrors() []error { return m }

// ListHouseReplyValidationError is the validation error returned by
// ListHouseReply.Validate if the designated constraints aren't met.
type ListHouseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHouseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHouseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHouseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHouseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHouseReplyValidationError) ErrorName() string { return "ListHouseReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListHouseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHouseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHouseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHouseReplyValidationError{}

// Validate checks the field values on ListHouseReply_House with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHouseReply_House) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHouseReply_House with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHouseReply_HouseMultiError, or nil if none found.
func (m *ListHouseReply_House) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHouseReply_House) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Community

	// no validation rules for Description

	// no validation rules for Image

	if len(errors) > 0 {
		return ListHouseReply_HouseMultiError(errors)
	}

	return nil
}

// ListHouseReply_HouseMultiError is an error wrapping multiple validation
// errors returned by ListHouseReply_House.ValidateAll() if the designated
// constraints aren't met.
type ListHouseReply_HouseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHouseReply_HouseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHouseReply_HouseMultiError) AllErrors() []error { return m }

// ListHouseReply_HouseValidationError is the validation error returned by
// ListHouseReply_House.Validate if the designated constraints aren't met.
type ListHouseReply_HouseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHouseReply_HouseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHouseReply_HouseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHouseReply_HouseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHouseReply_HouseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHouseReply_HouseValidationError) ErrorName() string {
	return "ListHouseReply_HouseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHouseReply_HouseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHouseReply_House.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHouseReply_HouseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHouseReply_HouseValidationError{}
