// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/history/service/v1/history.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SaveHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveHistoryRequestMultiError, or nil if none found.
func (m *SaveHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObjId() <= 0 {
		err := SaveHistoryRequestValidationError{
			field:  "ObjId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetObjType()) < 1 {
		err := SaveHistoryRequestValidationError{
			field:  "ObjType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := SaveHistoryRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SaveHistoryRequestMultiError(errors)
	}

	return nil
}

// SaveHistoryRequestMultiError is an error wrapping multiple validation errors
// returned by SaveHistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type SaveHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveHistoryRequestMultiError) AllErrors() []error { return m }

// SaveHistoryRequestValidationError is the validation error returned by
// SaveHistoryRequest.Validate if the designated constraints aren't met.
type SaveHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveHistoryRequestValidationError) ErrorName() string {
	return "SaveHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveHistoryRequestValidationError{}

// Validate checks the field values on SaveHistoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveHistoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveHistoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveHistoryReplyMultiError, or nil if none found.
func (m *SaveHistoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveHistoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveHistoryReplyMultiError(errors)
	}

	return nil
}

// SaveHistoryReplyMultiError is an error wrapping multiple validation errors
// returned by SaveHistoryReply.ValidateAll() if the designated constraints
// aren't met.
type SaveHistoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveHistoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveHistoryReplyMultiError) AllErrors() []error { return m }

// SaveHistoryReplyValidationError is the validation error returned by
// SaveHistoryReply.Validate if the designated constraints aren't met.
type SaveHistoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveHistoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveHistoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveHistoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveHistoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveHistoryReplyValidationError) ErrorName() string { return "SaveHistoryReplyValidationError" }

// Error satisfies the builtin error interface
func (e SaveHistoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveHistoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveHistoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveHistoryReplyValidationError{}

// Validate checks the field values on GetHistoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistoryRequestMultiError, or nil if none found.
func (m *GetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetHistoryRequestMultiError(errors)
	}

	return nil
}

// GetHistoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetHistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistoryRequestMultiError) AllErrors() []error { return m }

// GetHistoryRequestValidationError is the validation error returned by
// GetHistoryRequest.Validate if the designated constraints aren't met.
type GetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryRequestValidationError) ErrorName() string {
	return "GetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryRequestValidationError{}

// Validate checks the field values on GetHistoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHistoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistoryReplyMultiError, or nil if none found.
func (m *GetHistoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetHistoryReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetHistoryReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHistoryReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetHistoryReplyMultiError(errors)
	}

	return nil
}

// GetHistoryReplyMultiError is an error wrapping multiple validation errors
// returned by GetHistoryReply.ValidateAll() if the designated constraints
// aren't met.
type GetHistoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistoryReplyMultiError) AllErrors() []error { return m }

// GetHistoryReplyValidationError is the validation error returned by
// GetHistoryReply.Validate if the designated constraints aren't met.
type GetHistoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryReplyValidationError) ErrorName() string { return "GetHistoryReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetHistoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryReplyValidationError{}

// Validate checks the field values on GetHistoryReply_History with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHistoryReply_History) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHistoryReply_History with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHistoryReply_HistoryMultiError, or nil if none found.
func (m *GetHistoryReply_History) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHistoryReply_History) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjId

	// no validation rules for ObjType

	if all {
		switch v := interface{}(m.GetCreateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHistoryReply_HistoryValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHistoryReply_HistoryValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHistoryReply_HistoryValidationError{
				field:  "CreateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHistoryReply_HistoryMultiError(errors)
	}

	return nil
}

// GetHistoryReply_HistoryMultiError is an error wrapping multiple validation
// errors returned by GetHistoryReply_History.ValidateAll() if the designated
// constraints aren't met.
type GetHistoryReply_HistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHistoryReply_HistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHistoryReply_HistoryMultiError) AllErrors() []error { return m }

// GetHistoryReply_HistoryValidationError is the validation error returned by
// GetHistoryReply_History.Validate if the designated constraints aren't met.
type GetHistoryReply_HistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHistoryReply_HistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHistoryReply_HistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHistoryReply_HistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHistoryReply_HistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHistoryReply_HistoryValidationError) ErrorName() string {
	return "GetHistoryReply_HistoryValidationError"
}

// Error satisfies the builtin error interface
func (e GetHistoryReply_HistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHistoryReply_History.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHistoryReply_HistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHistoryReply_HistoryValidationError{}
